unique(final_tweets$MedNegNews <= final_tweets$AllNews)
unique(final_tweets$MedPosEducation >= final_tweets$AllEducation)
unique(final_tweets$MedPosStyle >= final_tweets$AllStyle)
unique(final_tweets$MedPosTravel >= final_tweets$AllTravel)
unique(final_tweets$MedPosBusiness >= final_tweets$AllBusiness)
unique(final_tweets$MedPosHealth >= final_tweets$AllHealth)
unique(final_tweets$MedPosTechSci >= final_tweets$AllTechSci)
unique(final_tweets$MedPosSports >= final_tweets$AllSports)
unique(final_tweets$MedPosArt >= final_tweets$AllArt)
unique(final_tweets$MedPosNews >= final_tweets$AllNews)
final_tweets$NumOfWordsNotInMTurk=final_tweets$NumOfWordsInTweet-final_tweets$NumOfWordsInMTurk
head(final_tweets)
final_tweets = final_tweets[order(final_tweets[,68]),]
head(final_tweets)
write.csv(final_tweets, file="~/Dropbox/classed-and-scored-tweets.csv", row.names = F)
tail(final_tweets)
quit()
cd ..
install.packages("geosphere")
library(geosphere)
quit()
mulval_list_score=c(0.64, 0.46, 0.5933, 0.8056, 0.5847, 0.7696, 0.64, 0.8157, 0.616)
mulval_list_ips = c("192.168.1.1", "192.168.1.100", "192.168.1.101", "192.168.1.101", "192.168.1.102", "192.168.1.2", "192.168.1.21", "192.168.1.86")
niv_list_score = c(3.432289355824672, 8.152701092994894, 8.699464005436528, 7.9802558261949486, 4.5517023561709, 5.915948129304299, 5.22609095774)
niv_list_ips = c("192.168.1.1", "192.168.1.100", "192.168.1.101", "192.168.1.102", "192.168.1.2", "192.168.1.21", "192.168.1.86")
niv_list = read.csv("~/Desktop/iivs-listed.csv", header=T)
.20*.58
0.8056+0.116
1-0.7696
0.2304*0.64
0.7696+0.147456
mulval_list_score=c(0.64, 0.46, 0.5933, 0.9216, 0.5847, 0.917056, 0.64, 0.8157, 0.616)
mulval_list_ips = c("192.168.1.1", "192.168.1.100", "192.168.1.101", "192.168.1.102", "192.168.1.2", "192.168.1.21", "192.168.1.86")
niv_list_score = niv_list$IIV.Score
niv_list_ips = niv_list$IP.Addr
niv_list_ips
niv_list_ips = as.character(niv_list_ips)
sample(seq_len(nrow(niv_list)), prob=niv_list_score)
sample(seq_len(nrow(niv_list)), 1, prob=niv_list_score)
niv_list_ips[sample(seq_len(nrow(niv_list)), 1, prob=niv_list_score)]
for (i in 1:100)
{
niv_list_ips[sample(seq_len(nrow(niv_list)), 1, prob=niv_list_score)]
}
for (i in 1:100)
{
print(niv_list_ips[sample(seq_len(nrow(niv_list)), 1, prob=niv_list_score)])
}
niv_list_score
niv_list_ips
for (i in 1:100)
{
#print(niv_list_ips[sample(seq_len(nrow(niv_list)), 1, prob=niv_list_score)])
print(sample(seq_len(nrow(niv_list)), 1, prob=niv_list_score))
}
new_list = sort(niv_list)
sort(niv_list)
sort(niv_list_score)
new_list = sort(niv_list_score)
for (i in 1:100)
{
#print(niv_list_ips[sample(seq_len(nrow(niv_list)), 1, prob=niv_list_score)])
print(sample(seq_len(nrow(niv_list)), 1, prob=new_list))
}
for (i in 1:100)
{
#print(niv_list_ips[sample(seq_len(nrow(niv_list)), 1, prob=niv_list_score)])
plot_list=c(plot_list, print(sample(seq_len(nrow(niv_list)), 1, prob=new_list)))
}
plot_list=c()
for (i in 1:1000)
{
#print(niv_list_ips[sample(seq_len(nrow(niv_list)), 1, prob=niv_list_score)])
plot_list=c(plot_list, print(sample(seq_len(nrow(niv_list)), 1, prob=new_list)))
}
for (i in 1:1000)
{
#print(niv_list_ips[sample(seq_len(nrow(niv_list)), 1, prob=niv_list_score)])
plot_list=c(plot_list, (sample(seq_len(nrow(niv_list)), 1, prob=new_list)))
}
plot(plot_list)
length(plot_list>20)
plot_list=c()
for (i in 1:1000)
{
#print(niv_list_ips[sample(seq_len(nrow(niv_list)), 1, prob=niv_list_score)])
plot_list=c(plot_list, (sample(seq_len(nrow(niv_list)), 1, prob=new_list)))
}
length(olot_list[plot_list>20])
length(plot_list[plot_list>20])
length(plot_list[plot_list>30])
length(plot_list[plot_list>40])
nrow(new_list)
length(new_list)
ip = niv_list_ips[sample(seq_len(nrow(niv_list)), 1, prob=niv_list_score)]
ip
# which(x %in%
which(mulval_list_ips %in% ip)
runif(0,1)
runif(1))
runif(1)
runif(20)
runif(n=20)
rnorm()
random()
x1 <- runif(1, 5.0, 7.5)
runif
library(stats)
runif
x1 <- runif(1, 5.0, 7.5)
attack = runif()
attack = runif(n=1)
attack
ip_attacked_list=c()
exec_code_succeeded_list=c()
for (i in 1:2000)
{
ip = niv_list_ips[sample(seq_len(nrow(niv_list)), 1, prob=niv_list_score)]
ip_attacked_list=c(ip_attacked_list, ip)
index = which(mulval_list_ips %in% ip)
attack = runif(n=1)
exec_code_succeeded_list=c(exec_code_succeeded_list, mulval_list_score[index]>(1-attack))
}
exec_code_succeeded_list[exec_code_succeeded_list==TRUE]
length(exec_code_succeeded_list[exec_code_succeeded_list==TRUE])
plot(ip_attacked_list)
hist(ip_attacked_list)
barplot(prop.table(table(ip_attacked_list))
)
barplot(table(ip_attacked_list))
barplot(table(ip_attacked_list[exec_code_succeeded_list==TRUE]))
barplot(table(ip_attacked_list))
mulval.iiv.ip_attacked_list = ip_attacked_list
mulval.iiv.exec_code_succeeded_list = ip_attacked_list
ip_attacked_list=c()
exec_code_succeeded_list=c()
for (i in 1:2000)
{
ip = niv_list_ips[sample(seq_len(length(mulval_list_ips)), 1, prob=mulval_list_score)]
ip_attacked_list=c(ip_attacked_list, ip)
index = which(mulval_list_ips %in% ip)
attack = runif(n=1)
exec_code_succeeded_list=c(exec_code_succeeded_list, mulval_list_score[index]>(1-attack))
}
seq_len(length(mulval_list_ips))
mulval_list_score=c(0.64, 0.46, 0.5933, 0.9216, 0.917056, 0.64, 0.8157, 0.616)
mulval_list_ips = c("192.168.1.1", "192.168.1.100", "192.168.1.101", "192.168.1.102", "192.168.1.2", "192.168.1.21", "192.168.1.86")
ip_attacked_list=c()
exec_code_succeeded_list=c()
for (i in 1:2000)
{
ip = niv_list_ips[sample(seq_len(length(mulval_list_ips)), 1, prob=mulval_list_score)]
index = which(mulval_list_ips %in% ip)
attack = runif(n=1)
exec_code_succeeded_list=c(exec_code_succeeded_list, mulval_list_score[index]>(1-attack))
}
mulval_list_score=c(0.64, 0.46, 0.9216, 0.917056, 0.64, 0.8157, 0.616)
mulval_list_ips = c("192.168.1.1", "192.168.1.100", "192.168.1.101", "192.168.1.102", "192.168.1.2", "192.168.1.21", "192.168.1.86")
ip_attacked_list=c()
exec_code_succeeded_list=c()
for (i in 1:2000)
{
ip = niv_list_ips[sample(seq_len(length(mulval_list_ips)), 1, prob=mulval_list_score)]
ip_attacked_list=c(ip_attacked_list, ip)
index = which(mulval_list_ips %in% ip)
attack = runif(n=1)
exec_code_succeeded_list=c(exec_code_succeeded_list, mulval_list_score[index]>(1-attack))
}
mulval.mulval.ip_attacked_list = ip_attacked_list
mulval.mulval.exec_code_succeeded_list = exec_code_succeeded_list
barplot(table(ip_attacked_list))
ip_attacked_list=c()
exec_code_succeeded_list=c()
for (i in 1:2000)
{
ip = mulval_list_ips[sample(seq_len(length(mulval_list_ips)), 1, prob=mulval_list_score)]
ip_attacked_list=c(ip_attacked_list, ip)
index = which(mulval_list_ips %in% ip)
attack = runif(n=1)
exec_code_succeeded_list=c(exec_code_succeeded_list, mulval_list_score[index]>(1-attack))
}
mulval.mulval.ip_attacked_list = ip_attacked_list
mulval.mulval.exec_code_succeeded_list = exec_code_succeeded_list
barplot(prop.table(table(ip_attacked_list))
)
barplot(table(ip_attacked_list))
barplot(table(ip_attacked_list))
ip_attacked_list=c()
exec_code_succeeded_list=c()
for (i in 1:2000)
{
ip = mulval_list_ips[sample(seq_len(length(mulval_list_ips)), 1, prob=mulval_list_score)]
ip_attacked_list=c(ip_attacked_list, ip)
index = which(niv_list_ips %in% ip)
attack = runif(n=1)
exec_code_succeeded_list=c(exec_code_succeeded_list, mulval_list_score[index]>(1-attack))
}
mulval.iiv.ip_attacked_list = ip_attacked_list
mulval.iiv.exec_code_succeeded_list = exec_code_succeeded_list
ls()
niv_list_score
ip_attacked_list=c()
exec_code_succeeded_list=c()
for (i in 1:2000)
{
ip = mulval_list_ips[sample(seq_len(nrow(niv_list)), 1, prob=niv_list_score)]
ip_attacked_list=c(ip_attacked_list, ip)
index = which(mulval_list_ips %in% ip)
attack = runif(n=1)
exec_code_succeeded_list=c(exec_code_succeeded_list, mulval_list_score[index]>(1-attack))
}
iiv.mulval.ip_attacked_list = ip_attacked_list
iiv.mulval.exec_code_succeeded_list = exec_code_succeeded_list
niv_list_ips
ip_attacked_list=c()
exec_code_succeeded_list=c()
for (i in 1:2000)
{
ip = niv_list_ips[sample(seq_len(nrow(niv_list)), 1, prob=niv_list_score)]
ip_attacked_list=c(ip_attacked_list, ip)
index = which( %in% ip)
attack = runif(n=1)
exec_code_succeeded_list=c(exec_code_succeeded_list, mulval_list_score[index]>(1-attack))
}
ip_attacked_list=c()
exec_code_succeeded_list=c()
for (i in 1:2000)
{
ip = niv_list_ips[sample(seq_len(nrow(niv_list)), 1, prob=niv_list_score)]
ip_attacked_list=c(ip_attacked_list, ip)
index = which( %in% ip)
attack = runif(n=1)
exec_code_succeeded_list=c(exec_code_succeeded_list, mulval_list_score[index]>(1-attack))
}
ip_attacked_list=c()
exec_code_succeeded_list=c()
for (i in 1:2000)
{
ip = niv_list_ips[sample(seq_len(nrow(niv_list)), 1, prob=niv_list_score)]
ip_attacked_list=c(ip_attacked_list, ip)
index = which( %in% ip)
attack = runif(n=1)
exec_code_succeeded_list=c(exec_code_succeeded_list, mulval_list_score[index]>(1-attack))
}
ip_attacked_list=c()
exec_code_succeeded_list=c()
for (i in 1:2000)
{
ip = niv_list_ips[sample(seq_len(nrow(niv_list)), 1, prob=niv_list_score)]
ip_attacked_list=c(ip_attacked_list, ip)
index = which(mulval_list_ips %in% ip)
attack = runif(n=1)
exec_code_succeeded_list=c(exec_code_succeeded_list, mulval_list_score[index]>(1-attack))
}
iiv.mulval.exec_code_succeeded_list = exec_code_succeeded_list
iiv.mulval.ip_attacked_list = ip_attacked_list
head(niv_list)
niv_list$IP.Addr = as.character(niv_list$IP.Addr)
niv_list$IIV.Score = as.character(niv_list$IIV.Score)
ip_attacked_list=c()
exec_code_succeeded_list=c()
for (i in 1:2000)
{
ip = niv_list_ips[sample(seq_len(nrow(niv_list)), 1, prob=niv_list_score)]
ip_attacked_list=c(ip_attacked_list, ip)
subFrame = subset(niv_list_ips, IP.Addr == ip)
threshold = subFrame$IIV.Score[sample(seq_len(nrow(subFrame), 1, prob=subFrame$IIV.Score)]/10
#index = which(mulval_list_ips %in% ip)
attack = runif(n=1)
#exec_code_succeeded_list=c(exec_code_succeeded_list, mulval_list_score[index]>(1-attack))
exec_code_succeeded_list=c(exec_code_succeeded_list, threshold>(1-attack))
}
subFrame
for (i in 1:2000)
{
ip = niv_list_ips[sample(seq_len(nrow(niv_list)), 1, prob=niv_list_score)]
ip_attacked_list=c(ip_attacked_list, ip)
subFrame = subset(niv_list_ips, IP.Addr == ip)
threshold = subFrame$IIV.Score[sample(seq_len(nrow(subFrame)), 1, prob=subFrame$IIV.Score]/10
#index = which(mulval_list_ips %in% ip)
attack = runif(n=1)
#exec_code_succeeded_list=c(exec_code_succeeded_list, mulval_list_score[index]>(1-attack))
exec_code_succeeded_list=c(exec_code_succeeded_list, threshold>(1-attack))
}
ip_attacked_list=c()
exec_code_succeeded_list=c()
for (i in 1:2000)
{
ip = niv_list_ips[sample(seq_len(nrow(niv_list)), 1, prob=niv_list_score)]
ip_attacked_list=c(ip_attacked_list, ip)
subFrame = subset(niv_list_ips, IP.Addr == ip)
threshold = subFrame$IIV.Score[sample(seq_len(nrow(subFrame)), 1, prob=subFrame$IIV.Score)]/10
#index = which(mulval_list_ips %in% ip)
attack = runif(n=1)
#exec_code_succeeded_list=c(exec_code_succeeded_list, mulval_list_score[index]>(1-attack))
exec_code_succeeded_list=c(exec_code_succeeded_list, threshold>(1-attack))
}
ip_attacked_list=c()
exec_code_succeeded_list=c()
for (i in 1:2000)
{
ip = niv_list_ips[sample(seq_len(nrow(niv_list)), 1, prob=niv_list_score)]
ip_attacked_list=c(ip_attacked_list, ip)
subFrame = subset(niv_list, IP.Addr == ip)
threshold = subFrame$IIV.Score[sample(seq_len(nrow(subFrame)), 1, prob=subFrame$IIV.Score)]/10
#index = which(mulval_list_ips %in% ip)
attack = runif(n=1)
#exec_code_succeeded_list=c(exec_code_succeeded_list, mulval_list_score[index]>(1-attack))
exec_code_succeeded_list=c(exec_code_succeeded_list, threshold>(1-attack))
}
ip_attacked_list=c()
exec_code_succeeded_list=c()
for (i in 1:2000)
{
ip = niv_list_ips[sample(seq_len(nrow(niv_list)), 1, prob=niv_list_score)]
ip_attacked_list=c(ip_attacked_list, ip)
subFrame = subset(niv_list, IP.Addr == ip)
print(subFrame$IIV.Score[sample(seq_len(nrow(subFrame)), 1, prob=subFrame$IIV.Score)]/10)
#index = which(mulval_list_ips %in% ip)
attack = runif(n=1)
#exec_code_succeeded_list=c(exec_code_succeeded_list, mulval_list_score[index]>(1-attack))
#exec_code_succeeded_list=c(exec_code_succeeded_list, threshold>(1-attack))
}
subFrame
subFrame$IIV.Score
ip_attacked_list=c()
exec_code_succeeded_list=c()
for (i in 1:2000)
{
ip = niv_list_ips[sample(seq_len(nrow(niv_list)), 1, prob=niv_list_score)]
ip_attacked_list=c(ip_attacked_list, ip)
subFrame = subset(niv_list, IP.Addr == ip)
subFrame$IIV.Score = as.numeric(as.character(subFrame$IIV.Score))
print(subFrame$IIV.Score[sample(seq_len(nrow(subFrame)), 1, prob=subFrame$IIV.Score)]/10)
#index = which(mulval_list_ips %in% ip)
attack = runif(n=1)
#exec_code_succeeded_list=c(exec_code_succeeded_list, mulval_list_score[index]>(1-attack))
#exec_code_succeeded_list=c(exec_code_succeeded_list, threshold>(1-attack))
}
ip_attacked_list=c()
exec_code_succeeded_list=c()
for (i in 1:2000)
{
ip = niv_list_ips[sample(seq_len(nrow(niv_list)), 1, prob=niv_list_score)]
ip_attacked_list=c(ip_attacked_list, ip)
subFrame = subset(niv_list, IP.Addr == ip)
subFrame$IIV.Score = as.numeric(as.character(subFrame$IIV.Score))
threshold = (subFrame$IIV.Score[sample(seq_len(nrow(subFrame)), 1, prob=subFrame$IIV.Score)]/10)
#index = which(mulval_list_ips %in% ip)
attack = runif(n=1)
#exec_code_succeeded_list=c(exec_code_succeeded_list, mulval_list_score[index]>(1-attack))
exec_code_succeeded_list=c(exec_code_succeeded_list, threshold>(1-attack))
}
iiv.iiv.ip_attacked_list = ip_attacked_list
iiv.iiv.exec_code_succeeded_list = exec_code_succeeded_list
ip_attacked_list=c()
exec_code_succeeded_list=c()
for (i in 1:2000)
{
ip = mulval_list_ips[sample(seq_len(length(mulval_list_ips)), 1, prob=mulval_list_score)]
ip_attacked_list=c(ip_attacked_list, ip)
subFrame = subset(niv_list, IP.Addr == ip)
subFrame$IIV.Score = as.numeric(as.character(subFrame$IIV.Score))
threshold = (subFrame$IIV.Score[sample(seq_len(nrow(subFrame)), 1, prob=subFrame$IIV.Score)]/10)
#index = which(mulval_list_ips %in% ip)
attack = runif(n=1)
#exec_code_succeeded_list=c(exec_code_succeeded_list, mulval_list_score[index]>(1-attack))
exec_code_succeeded_list=c(exec_code_succeeded_list, threshold>(1-attack))
}
# mulval.iiv.ip_attacked_list = ip_attacked_list
ls()
mulval.iiv.ip_attacked_list = ip_attacked_list
mulval.iiv.exec_code_succeeded_list = exec_code_succeeded_list
ls()
iiv.iiv.data = as.data.frame(cbind(iiv.iiv.ip_attacked_list, iiv.iiv.exec_code_succeeded_list))
head(iiv.iiv.data)
iiv.mulval.data = as.data.frame(cbind(iiv.mulval.ip_attacked_list, iiv.mulval.exec_code_succeeded_list))
mulval.iiv.data = as.data.frame(cbind(mulval.iiv.ip_attacked_list, mulval.iiv.exec_code_succeeded_list))
mulval.mulval.data = as.data.frame(cbind(mulval.mulval.ip_attacked_list, mulval.mulval.exec_code_succeeded_list))
iiv.iiv.data$IP.Attack.Method = "IIV"
iiv.iiv.data$Attack.Success.Method = "IIV"
mulval.iiv.data$Attack.Success.Method = "IIV"
mulval.iiv.data$IP.Attack.Method = "MULVAL"
iiv.mulval.data$IP.Attack.Method = "IIV"
iiv.mulval.data$Attack.Success.Method = "MULVAL"
mulval.mulval.data$IP.Attack.Method = "MULVAL"
mulval.mulval.data$Attack.Success.Method = "MULVAL"
sim.data = as.data.frame(rbind(iiv.iiv.data, iiv.mulval.data, mulval.iiv.data, mulval.mulval.data))
colnames(iiv.iiv.data)
sim.data = rbind(iiv.iiv.data, iiv.mulval.data, mulval.iiv.data, mulval.mulval.data)
colnames(iiv.iiv.data) = c("IP.Attacked", "Attack.Success", "Attacker.Choice.Method", "Attack.Success.Determination.Method")
colnames(mulval.iiv.data) = c("IP.Attacked", "Attack.Success", "Attacker.Choice.Method", "Attack.Success.Determination.Method")
colnames(mulval.mulval.data) = c("IP.Attacked", "Attack.Success", "Attacker.Choice.Method", "Attack.Success.Determination.Method")
colnames(iiv.mulval.data) = c("IP.Attacked", "Attack.Success", "Attacker.Choice.Method", "Attack.Success.Determination.Method")
sim.data = as.data.frame(rbind(iiv.iiv.data, iiv.mulval.data, mulval.iiv.data, mulval.mulval.data))
library(ggplot2)
head(sim.data)
sim.data$IP.Attacked = as.factor(sim.data$IP.Attacked)
sim.data$Attack.Success = as.logical(sim.data$Attack.Success)
ggplot(sim.data, aes(IP.Attacked))+geom_bar()
ggplot(sim.data, aes(IP.Attacked))+geom_bar()+facet_grid(Attacker.Choice.Method ~ Attack.Success.Determination.Method)
ggplot(sim.data, aes(IP.Attacked))+geom_bar()+facet_grid(Attacker.Choice.Method ~ Attack.Success.Determination.Method)
head(iiv.mulval.data)
head(mulval.iiv.data)
mulval.iiv.data$Attacker.Choice.Method = "MULVAL"
mulval.iiv.data$Attack.Success.Determination.Method = "IIV"
sim.data = as.data.frame(rbind(iiv.iiv.data, iiv.mulval.data, mulval.iiv.data, mulval.mulval.data))
sim.data$IP.Attacked = as.factor(sim.data$IP.Attacked)
sim.data$Attack.Success = as.logical(sim.data$Attack.Success)
ggplot(sim.data, aes(IP.Attacked))+geom_bar()+facet_grid(Attacker.Choice.Method ~ Attack.Success.Determination.Method)
ggplot(sim.data, aes(IP.Attacked, fill=Attack.Success))+geom_bar()+facet_grid(Attacker.Choice.Method ~ Attack.Success.Determination.Method)
head(sim.data)
old.sim.data = sim.data
sim.data$Attacker.Choice.Method = paste(sim.data$Attacker.Choice.Method, "Attacker Choice Method")
head(sim.data)
sim.data$Attack.Success.Determination.Method = paste(sim.data$Attack.Success.Determination.Method, "Determination of Attack Success")
ggplot(sim.data, aes(IP.Attacked))+geom_bar()+facet_grid(Attacker.Choice.Method ~ Attack.Success.Determination.Method)
ggplot(sim.data, aes(IP.Attacked, fill=Attack.Success))+geom_bar()+facet_grid(Attacker.Choice.Method ~ Attack.Success.Determination.Method)
ggplot(sim.data, aes(IP.Attacked, fill=Attack.Success))+geom_bar()+facet_grid(Attack.Success.Determination.Method ~ Attacker.Choice.Method)
ggplot(sim.data, aes(IP.Attacked, fill=Attack.Success))+geom_bar()+facet_grid(Attack.Success.Determination.Method ~ Attacker.Choice.Method)+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(sim.data, aes(IP.Attacked, fill=Attack.Success))+geom_bar()+facet_grid(Attack.Success.Determination.Method ~ Attacker.Choice.Method)+ theme(axis.text.x = element_text(angle = 30, hjust = 1))
ls()
head(niv_list)
niv_list
subset(niv_list, IP.Addr == "192.168.1.2")
subset(niv_list, IP.Addr == "192.168.1.1")
subset(niv_list, IP.Addr == "192.168.1.101")
subset(niv_list, IP.Addr == "192.168.1.100")
subset(niv_list, IP.Addr == "192.168.1.86")
subset(niv_list, IP.Addr == "192.168.1.21")
subset(niv_list, IP.Addr == "192.168.1.102")
quit()
rm(list=ls())
quit()
library(rpart)
library(rpart.plot)
library(caret)
getwd()
setwd("~/Documents/GitHub/odu-analytics-course/intro-to-ml/code/")
bc_data = read.csv("../datasets/cancer_dataset.csv", header=T)
set.seed(42)
index = createDataPartition(bc_data$classes, p = 0.7, list = FALSE)
train_data = bc_data[index, ]
test_data  = bc_data[-index, ]
fit <- rpart(classes ~ ., data = train_data, method = "class", control = rpart.control(xval = 10, minbucket = 2, cp = 0), parms = list(split = "information"))
rpart.plot(fit, extra = 100)
model_rf = caret::train(classes ~ .,
data = train_data, method = "rf",
preProcess = c("scale", "center"),
trControl = trainControl(method = "repeatedcv",
number = 5, repeats = 3,
savePredictions = TRUE, verboseIter = FALSE)
)
save(model_rf, file = "../models/model_rf.RData")
load("../models/model_rf.RData")
model_rf
source('~/Documents/GitHub/odu-analytics-course/intro-to-ml/code/intro_ml_decision_tree_and_random_forest.r')
str(model_rf$finalModel$forest)
model_rf$finalModel$confusion
imp = model_rf$finalModel$importance
imp[order(imp, decreasing = TRUE), ]
importance = varImp(model_rf, scale = TRUE)
plot(importance)
confusionMatrix(predict(model_rf, test_data), as.factor(test_data$classes))
results = data.frame(actual = test_data$classes, predict(model_rf, test_data, type = "prob"))
results$prediction = ifelse(results$benign > 0.5, "benign", ifelse(results$malignant > 0.5, "malignant", NA))
results$correct = ifelse(results$actual == results$prediction, TRUE, FALSE)
ggplot(results, aes(x = prediction, fill = correct)) + geom_bar(position = "dodge")
library(tidyverse) # for tidy data analysis
library(tidytext)
library(tm)
library(caret)
congress = read.csv("../datasets/congress_bills_dataset.csv", header=T)
congress = mutate(congress, text = as.character(text))
View(congress)
congress_tokens = unnest_tokens(congress, output = word, input = text)
View(congress_tokens)
congress_tokens = filter(congress_tokens, !str_detect(word, "^[0-9]*$"))
congress_tokens = anti_join(congress_tokens, stop_words)
congress_tokens = mutate(congress_tokens, word = SnowballC::wordStem(word))
congress_dtm = count(congress_tokens, ID, word)
View(congress_dtm)
index = createDataPartition(model_data$major, p = 0.7, list = FALSE)
congress_dtm = cast_dtm(congress_dtm, document = ID, term = word, value = n)
congress_dtm = removeSparseTerms(congress_dtm, sparse = .99)
congress_tfidf = count(congress_tokens, major, word)
congress_tfidf =  bind_tf_idf(congress_tfidf,
term = word,
document = major,
n = n
)
View(congress_tfidf)
plot_congress = arrange(congress_tfidf, desc(tf_idf))
plot_congress = mutate(plot_congress, word = factor(word, levels = rev(unique(word))))
plot_congress = filter(plot_congress, major %in% c(1, 2, 3, 6))
plot_congress = mutate(plot_congress, major = factor(major, levels = c(1, 2, 3, 6), labels = c("Macroeconomics", "Civil Rights",
"Health", "Education")))
plot_congress = group_by(plot_congress, major)
plot_congress = top_n(plot_congress, 10)
plot_congress = ungroup(plot_congress)
ggplot(plot_congress, aes(word, tf_idf)) + geom_col() + labs(x = NULL, y = "tf-idf") + facet_wrap(~major, scales = "free") + coord_flip()
model_data = cbind.data.frame(as.matrix(congress_dtm), as.factor(congress$major))
number_of_cols = ncol(model_data)
colnames(model_data) = c(colnames(model_data)[1:(number_of_cols-1)], "major")
index = createDataPartition(model_data$major, p = 0.7, list = FALSE)
train_data = model_data[index, ]
test_data  = model_data[-index, ]
congress_rf = train(major ~ ., data = train_data,
method = "rf", ntree = 200,
trControl = trainControl(method = "oob"))
congress_rf$finalModel
confusionMatrix(predict(congress_rf, test_data), test_data$major)
